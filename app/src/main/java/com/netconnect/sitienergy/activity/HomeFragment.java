package com.netconnect.sitienergy.activity;import android.app.ProgressDialog;import android.content.Context;import android.content.SharedPreferences;import android.graphics.Bitmap;import android.graphics.Color;import android.graphics.drawable.BitmapDrawable;import android.net.Uri;import android.os.AsyncTask;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.support.design.widget.CoordinatorLayout;import android.support.design.widget.Snackbar;import android.support.v4.app.DialogFragment;import android.support.v4.app.Fragment;import android.text.TextUtils;import android.util.Base64;import android.util.Log;import android.view.LayoutInflater;import android.view.Menu;import android.view.MenuInflater;import android.view.MenuItem;import android.view.View;import android.view.ViewGroup;import android.widget.ImageView;import android.widget.TextView;import android.widget.Toast;import com.netconnect.sitienergy.APP.AppController;import com.netconnect.sitienergy.R;import com.netconnect.sitienergy.utils.EncryptionUtil;import com.netconnect.sitienergy.utils.GUIUtils;import com.netconnect.sitienergy.utils.JSONParser;import com.netconnect.sitienergy.utils.NCUtils;import com.nostra13.universalimageloader.core.DisplayImageOptions;import com.nostra13.universalimageloader.core.ImageLoader;import org.json.JSONArray;import org.json.JSONObject;import java.io.ByteArrayOutputStream;import java.text.DateFormat;import java.text.Format;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.Calendar;import java.util.Date;import java.util.HashMap;/** * Created by Vimal Kumar */public class HomeFragment extends Fragment {    private JSONArray user = null;    private SharedPreferences sharedpreferences;    private String url;    private String encodedString;    private JSONParser jParser = new JSONParser();    private static final String TAG = HomeFragment.class.getSimpleName();    private ImageView imgProfileImage;    private TextView txtName;    private TextView txtProfileName;    private TextView txtARNNO;    private TextView txtBirthDate;    private ImageView imgEdit;    private ImageView btnChgProfile;    private TextView txtEmail;    private TextView txtMobileNo;    private TextView txtAddress;    private CoordinatorLayout coordinatorLayoutView;    private String dataGotFromServerProfile;    private static HomeFragment mInstance;    public static synchronized HomeFragment getInstance() {        return mInstance;    }    @Override    public View onCreateView(LayoutInflater inflater, ViewGroup container,                             Bundle savedInstanceState) {        mInstance = this;        GUIUtils.getTransition(this);        setHasOptionsMenu(true);        View rootView = inflater.inflate(R.layout.fragment_home, container, false);        sharedpreferences = getActivity().getSharedPreferences(AppController.MyPREFERENCES, Context.MODE_PRIVATE);        imgProfileImage = (ImageView) rootView.findViewById(R.id.profile_img);        txtName = (TextView) rootView.findViewById(R.id.user_name);        txtProfileName = (TextView) rootView.findViewById(R.id.profile_name);        txtARNNO = (TextView) rootView.findViewById(R.id.arnNo);        txtBirthDate = (TextView) rootView.findViewById(R.id.birth_date);        imgEdit = (ImageView) rootView.findViewById(R.id.edit);        btnChgProfile = (ImageView) rootView.findViewById(R.id.chg_photo_btn);        txtEmail = (TextView) rootView.findViewById(R.id.email);        txtMobileNo = (TextView) rootView.findViewById(R.id.mobile);        txtAddress = (TextView) rootView.findViewById(R.id.address);        coordinatorLayoutView = (CoordinatorLayout)  rootView.findViewById(R.id.snackbarPosition);        imgEdit.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                Bundle args = new Bundle();                args.putString("email", txtEmail.getText().toString());                args.putString("mobile", txtMobileNo.getText().toString());                EditInfoFragment editDialog = new EditInfoFragment();                editDialog.setArguments(args);                redirectToDialog(editDialog);            }        });        btnChgProfile.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                Bundle args = new Bundle();                encodedString = getBitmapFromImageView();                args.putString("image_string",encodedString);                EditProfilePicture editPhotoDialog = new EditProfilePicture();                editPhotoDialog.setArguments(args);                redirectToDialog(editPhotoDialog);            }        });        this.setRetainInstance(true);        dataGotFromServerProfile = sharedpreferences.getString("dataGotFromServerProfile", "");        if(TextUtils.isEmpty(dataGotFromServerProfile) || dataGotFromServerProfile==null){            refresh();        }        else{            setProfile(dataGotFromServerProfile);        }        return rootView;    }    @Override    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {        MenuInflater menuInflater = getActivity().getMenuInflater();        menuInflater.inflate(R.menu.menu_main, menu);    }    public boolean onOptionsItemSelected(MenuItem item) {        // Handle item selection        switch (item.getItemId()) {            case R.id.chg_pass:                redirectToDialog(new DialogResetPassword());                return true;            case R.id.logout:                MainActivity.getInstance().logout();                return true;            default:                return super.onOptionsItemSelected(item);        }    }    private void redirectToDialog(DialogFragment fragment) {        fragment.setStyle(DialogFragment.STYLE_NORMAL, R.style.CustomDialog);        fragment.show(getFragmentManager(), "");    }    @Override    public void onResume() {        super.onResume();    }    public void refresh() {        Uri.Builder uriBuilder = Uri.parse(AppController.SEL_URL + "profile").buildUpon()                .appendQueryParameter("custID", EncryptionUtil.encode(AppController.getUsername()))                .appendQueryParameter("type","android");        url = uriBuilder.build().toString();        if (jParser.isConnectingToInternet(getActivity().getApplicationContext())) {            new JSONParse().execute(url);        } else            Toast.makeText(getActivity().getApplicationContext(), "Internet connection not available", Toast.LENGTH_LONG).show();    }    private void setProfile(String jsonString) {        try {            JSONObject json = new JSONObject(jsonString);            String firstName = json.optString("FirstName", "");            String lastName = json.optString("LastName", "");            //String fName = json.optString("FatherName", "");            String dob = json.optString("DOB", "");            String email = json.optString("Email", "");            String mobileNumber = json.optString("Mobile", "");            String country = json.optString("Country", "");            String state = json.optString("State", "");            String city = json.optString("City", "");            String area = json.optString("Area", "");            String society = json.optString("Society", "");            String address = json.optString("Address", "");            String gender = json.optString("Gender", "");            String fileName = json.optString("CustomerPhoto", "");            String profileImage = json.optString("profile_image", "");            HashMap<String, String> map = new HashMap<String, String>();            map.put("FirstName", firstName);            map.put("LastName", lastName);            map.put("DOB", dob);            map.put("Email", email);            map.put("Mobile", mobileNumber);            map.put("Country", country);            map.put("State", state);            map.put("City", city);            map.put("Area", area);            map.put("Society", society);            map.put("Address", address);            map.put("Gender", gender);            if (!sharedpreferences.contains(AppController.KEY_EMAIL)) {                SharedPreferences.Editor editor = sharedpreferences.edit();                editor.putString(AppController.KEY_EMAIL, email);                editor.putString(AppController.KEY_MOBILE, mobileNumber);                editor.commit();            }            AppController.setEmail(map.get("Email"));            AppController.setMobile(map.get("Mobile"));            String img_url = AppController.USER_IMAGE_URL + fileName;            int fallBack;            if (map.get("Gender").equalsIgnoreCase("female")) {                fallBack = R.drawable.female_user;            } else                fallBack = R.drawable.male_user;            ImageLoader imageLoader = ImageLoader.getInstance();            DisplayImageOptions options = new DisplayImageOptions.Builder().cacheInMemory(true)                    .cacheOnDisc(true).resetViewBeforeLoading(true)                    .showImageForEmptyUri(fallBack)                    .showImageOnFail(fallBack)                    .showImageOnLoading(fallBack).build();            if(!TextUtils.isEmpty(profileImage) || profileImage != null || profileImage.length()>5){                Bitmap bm = NCUtils.StringToBitMap(profileImage);                if(bm!=null) {                    imgProfileImage.setImageBitmap(bm);                }else{                    imageLoader.displayImage(img_url, imgProfileImage, options);                }            }            else{                imageLoader.displayImage(img_url, imgProfileImage, options);            }            //txtProfileName.setText("Customer: " + map.get("FirstName") + " " + map.get("LastName"));            txtName.setText(map.get("FirstName") + "");            txtARNNO.setText("ARN No: " + AppController.getUsername());            txtEmail.setText(map.get("Email"));            txtMobileNo.setText(map.get("Mobile"));            txtAddress.setText(map.get("Address") + ", " + map.get("Society") + ", " + map.get("Area") + ", " + map.get("City") + ", " + map.get("State") + ", " + map.get("Country"));            DateFormat inputDF = new SimpleDateFormat("dd/MM/yyyy");            Date date1 = null;            String month = null;            int day = 0, year = 0;            try {                date1 = inputDF.parse(map.get("DOB"));                Calendar cal = Calendar.getInstance();                cal.setTime(date1);                Format formatter = new SimpleDateFormat("MMM");                month = formatter.format(date1);                day = cal.get(Calendar.DAY_OF_MONTH);                year = cal.get(Calendar.YEAR);            } catch (ParseException e) {                e.printStackTrace();            } catch (Exception e) {                e.printStackTrace();            }            if (day != 0 && month != null && year != 0)                txtBirthDate.setText("DOB: " + day + " " + month + " " + year);            else                txtBirthDate.setText("DOB: " + map.get("DOB"));        } catch (Exception e) {            e.printStackTrace();        }    }    public String getBitmapFromImageView() {        Bitmap b = ((BitmapDrawable) imgProfileImage.getDrawable()).getBitmap();        ByteArrayOutputStream baos = new ByteArrayOutputStream();        b.compress(Bitmap.CompressFormat.JPEG, 50, baos);        byte[] byte_arr = baos.toByteArray();        // Encode Image to String        return Base64.encodeToString(byte_arr, 0);    }    private class JSONParse extends AsyncTask<String, String, String> {        private ProgressDialog pDialog;        @Override        protected void onPreExecute() {            super.onPreExecute();            pDialog = new ProgressDialog(getActivity());            pDialog.setMessage("Loading.. please wait..");            pDialog.setIndeterminate(true);            pDialog.setCancelable(false);            pDialog.show();            final Handler h = new Handler() {                @Override                public void handleMessage(Message message) {                    if (pDialog.isShowing()) {                        pDialog.dismiss();                        Toast.makeText(getActivity().getApplicationContext(), "Internet connection problem", Toast.LENGTH_LONG).show();                    }                }            };            h.sendMessageDelayed(new Message(), 30000);        }        @Override        protected String doInBackground(String... args) {            return jParser.getJSONFromUrl(url);        }        @Override        protected void onPostExecute(String jsonString) {            if (pDialog.isShowing()) {                pDialog.dismiss();            }            try {                JSONObject json = new JSONObject(jsonString);                String result = json.optString("RESULT", "");                if ("NULL".equals(result)) {                    showActionSnackBar(coordinatorLayoutView);                }                else{                    SharedPreferences.Editor editor = sharedpreferences.edit();                    editor.remove("dataGotFromServerProfile");                    editor.commit();                    editor.putString("dataGotFromServerProfile", jsonString);                    editor.commit();                    setProfile(jsonString);                }            }catch (Exception e){}        }    }    public void showActionSnackBar(CoordinatorLayout coordinatorLayout) {        Snackbar snackbar = Snackbar                .make(coordinatorLayout, "No Internet Access!", Snackbar.LENGTH_LONG)                .setAction("RETRY", new View.OnClickListener() {                    @Override                    public void onClick(View view) {                        refresh();                    }                });        // Changing message text color        snackbar.setActionTextColor(Color.RED);        // Changing action button text color        View sbView = snackbar.getView();        TextView textView = (TextView) sbView.findViewById(android.support.design.R.id.snackbar_text);        textView.setTextColor(Color.YELLOW);        snackbar.show();    }}