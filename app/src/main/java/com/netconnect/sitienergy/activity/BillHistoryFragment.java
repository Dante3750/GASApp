package com.netconnect.sitienergy.activity;import android.app.Activity;import android.app.AlertDialog;import android.app.DownloadManager;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.content.pm.PackageManager;import android.content.pm.ResolveInfo;import android.net.Uri;import android.os.AsyncTask;import android.os.Build;import android.os.Bundle;import android.support.v4.app.Fragment;import android.support.v4.widget.SwipeRefreshLayout;import android.text.TextUtils;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.LinearLayout;import android.widget.ListView;import android.widget.Toast;import com.netconnect.sitienergy.APP.AppController;import com.netconnect.sitienergy.R;import com.netconnect.sitienergy.adapter.BillHistoryAdapter;import com.netconnect.sitienergy.utils.EncryptionUtil;import com.netconnect.sitienergy.utils.GUIUtils;import com.netconnect.sitienergy.utils.JSONParser;import com.netconnect.sitienergy.utils.Utility;import org.json.JSONArray;import org.json.JSONObject;import java.util.ArrayList;import java.util.HashMap;import java.util.List;public class BillHistoryFragment extends Fragment implements BillHistoryAdapter.OnImgClickListener, SwipeRefreshLayout.OnRefreshListener {    private static final String TAG = "BillHistoryFragment";    private JSONParser jParser = new JSONParser();    private String billUrl, file;    private String url = null;    private ListView billListView;    private LinearLayout historyNotFound;    private BillHistoryAdapter adapter;    private ArrayList<HashMap<String, String>> arrayList = new ArrayList<HashMap<String, String>>();    private SwipeRefreshLayout swipeRefreshLayout;    private static BillHistoryFragment mInstance;    public static synchronized BillHistoryFragment getInstance() {        return mInstance;    }    public BillHistoryFragment() {        // Required empty public constructor    }    @Override    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);    }    @Override    public View onCreateView(LayoutInflater inflater, ViewGroup container,                             Bundle savedInstanceState) {        mInstance = this;        View rootView = inflater.inflate(R.layout.fragment_bill_history, container, false);        GUIUtils.getTransition(this);        billListView = (ListView) rootView.findViewById(R.id.billListView);        historyNotFound = (LinearLayout) rootView.findViewById(R.id.not_found);        swipeRefreshLayout = (SwipeRefreshLayout) rootView.findViewById(R.id.swipe_refresh_layout);        Uri.Builder uriBuilder = Uri.parse("http://45.114.143.56/tgml/" + "app_billing_history").buildUpon()                .appendQueryParameter("customer_arn_no", AppController.getUsername());        url = uriBuilder.build().toString();        Log.v(TAG, url);        swipeRefreshLayout.setOnRefreshListener(this);        swipeRefreshLayout.post(new Runnable() {            @Override            public void run() {                try {                    arrayList.clear();                    swipeRefreshLayout.setRefreshing(true);                    loadUrl();                } catch (Exception e) {                }            }        });        return rootView;    }    public void loadUrl() {        try {            if (jParser.isConnectingToInternet(getActivity().getApplicationContext())) {                new JSONParse().execute();            } else {                swipeRefreshLayout.setRefreshing(false);                Toast.makeText(getActivity().getApplicationContext(), "Internet connection not available", Toast.LENGTH_LONG).show();            }        }catch (Exception e){}    }    @Override    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {        switch (requestCode) {            case Utility.MY_PERMISSIONS_REQUEST_WRITE_EXTERNAL_STORAGE:                if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {                    if (getBillUrl() != null && !TextUtils.isEmpty(getBillUrl()))                        downloadPdf(getBillUrl(), getFile());                }                break;        }    }    private void downloadPdf(final String downloadUrl, final String filename) {        DialogInterface.OnClickListener dialogClickListener = new DialogInterface.OnClickListener() {            @Override            public void onClick(DialogInterface dialog, int which) {                switch (which) {                    case DialogInterface.BUTTON_POSITIVE:                        if (jParser.isConnectingToInternet(getActivity().getApplicationContext())) {                            Toast.makeText(getActivity().getApplicationContext(), "Downloading...", Toast.LENGTH_SHORT).show();                            downloadFile(downloadUrl, filename);                        } else                            Toast.makeText(getActivity().getApplicationContext(), "Internet connection not available", Toast.LENGTH_LONG).show();                        break;                    case DialogInterface.BUTTON_NEGATIVE:                        //No button clicked                        break;                }            }        };        AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());        builder.setIcon(R.drawable.icon_download).setTitle("Download Bill").setMessage("Are you sure?").setPositiveButton("Yes", dialogClickListener)                .setNegativeButton("No", dialogClickListener).show();    }    public void downloadFile(String downloadUrl, String filename) {        Log.v("Bill DownLoad URL: ", billUrl);        DownloadManager.Request request = new DownloadManager.Request(Uri.parse(downloadUrl));        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {            request.allowScanningByMediaScanner();            request.setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED);        }        String billName = filename + "_SEL@" + System.currentTimeMillis() + ".pdf";        request.setDestinationInExternalPublicDir("/SEL", billName);        // get download service and enqueue file        DownloadManager manager = (DownloadManager) getActivity().getSystemService(Context.DOWNLOAD_SERVICE);        manager.enqueue(request);    }    public static boolean isDownloadManagerAvailable(Context context) {        try {            if (Build.VERSION.SDK_INT > Build.VERSION_CODES.HONEYCOMB) {                return true;            }            Intent intent = new Intent(Intent.ACTION_MAIN);            intent.addCategory(Intent.CATEGORY_LAUNCHER);            intent.setClassName("com.android.providers.downloads.ui", "com.android.providers.downloads.ui.DownloadList");            List<ResolveInfo> list = context.getPackageManager().queryIntentActivities(intent,                    PackageManager.MATCH_DEFAULT_ONLY);            return list.size() > 0;        } catch (Exception e) {            return false;        }    }    @Override    public void onResume() {        super.onResume();    }    @Override    public void onAttach(Activity activity) {        super.onAttach(activity);    }    @Override    public void onDetach() {        super.onDetach();    }    @Override    public void imgClicked(String downloadUrl, String filename) {        setBillUrl(downloadUrl);        setFile(filename);        Boolean result = isDownloadManagerAvailable(getActivity());        boolean permission = Utility.checkWritePermission(getActivity());        if (result)            if (permission)                downloadPdf(downloadUrl, filename);    }    @Override    public void onRefresh() {        arrayList.clear();        loadUrl();        adapter.notifyDataSetChanged();    }    private class JSONParse extends AsyncTask<String, String, String> {        @Override        protected void onPreExecute() {            swipeRefreshLayout.setRefreshing(true);            super.onPreExecute();        }        @Override        protected String doInBackground(String... args) {            JSONParser jParser = new JSONParser();            String json = jParser.getJSONFromUrl(url);            return json;        }        @Override        protected void onPostExecute(String jsonString) {            try {                JSONArray jsonarray = new JSONArray(jsonString);                for (int i = 0; i < jsonarray.length(); i++) {                    JSONObject jsonobject = jsonarray.getJSONObject(i);                    String billPayable = jsonobject.optString("total_amount", "");                    String billAmount = jsonobject.optString("invoice_amount", "");                    String billDate = jsonobject.optString("invoice_date", "");                    String billID = jsonobject.optString("id", "");                    String invoice = jsonobject.optString("invoice", "");                    HashMap<String, String> map = new HashMap<String, String>();                    map.put("bill_amount", billAmount);                    map.put("bill_date", billDate);                    map.put("bill_id", billID);                    map.put("bill_payable", billPayable);                    map.put("invoice", invoice);                    arrayList.add(map);                }                if (arrayList.size() == 0) {                    historyNotFound.setVisibility(View.VISIBLE);                }                billListView.setAdapter(null);                adapter = new BillHistoryAdapter(getActivity(), arrayList);                billListView.setAdapter(adapter);                adapter.notifyDataSetChanged();                adapter.setOnImgClickListener(getInstance());                swipeRefreshLayout.setRefreshing(false);            } catch (Exception e) {                swipeRefreshLayout.setRefreshing(false);                historyNotFound.setVisibility(View.VISIBLE);                e.printStackTrace();            }        }    }    public String getFile() {        return file;    }    public void setFile(String file) {        this.file = file;    }    public String getBillUrl() {        return billUrl;    }    public void setBillUrl(String billUrl) {        this.billUrl = billUrl;    }}